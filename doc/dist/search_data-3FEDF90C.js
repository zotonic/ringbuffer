searchData={"items":[{"type":"module","title":"ringbuffer","doc":"Ringbuffer implements a length limited queue. In systems this is often implemented as a ring, or cylic, buffer. Where the writer can push the reader ahead if the buffer is full. This kind of buffers is useful in situations where you can have surges of writers, with a limited amount of readers. And where it is allowed to drop entries from the queue if the readers can't keep up with the writers. An example is a logging system for a http server, which can handle large bursts of requests. The logger is often limited in its throughput, and it is perfectly ok to drop log entries if that means that the server can handle the peak load. This ring buffer is technically not a ring. It is a size limited buffer, implemented in ets. Its main characteristics are: Optimized for writes: non locking and non blocking queue writes; Size limited, define the maximum number of entries upon queue creation; Readers are synchronized to prevent race conditions; Readers return the number of entries that were lost due to too fast writers; As many queues as needed.","ref":"ringbuffer.html"},{"type":"function","title":"ringbuffer.delete/1","doc":"Delete a named ringbuffer, all queued data is destroyed. The ets table and the synchronizing process are deleted.","ref":"ringbuffer.html#delete/1"},{"type":"function","title":"ringbuffer.new/2","doc":"Create a new named buffer of Size entries. The name must be unique for all ets tables. The name must be an atom, and is used for the name of the ets table. A process owning the ets table and synchronizing the readers is added to &lt;tt&gt;ringbuffer_sup&lt;/tt&gt;.","ref":"ringbuffer.html#new/2"},{"type":"function","title":"ringbuffer.read/1","doc":"Read the next entry from the named ringbuffer. Return the number of skipped entries and the payload of the entry read. An entry is skipped if the readers are falling behind the writers by more that the size of the buffer. &lt;tt&gt;{error, empty}&lt;/tt&gt; is returned if the buffer is empty.","ref":"ringbuffer.html#read/1"},{"type":"function","title":"ringbuffer.start/0","doc":null,"ref":"ringbuffer.html#start/0"},{"type":"function","title":"ringbuffer.whereis/1","doc":"Find the ringbuffer with a certain name, return the pid if found, otherwise undefined.","ref":"ringbuffer.html#whereis/1"},{"type":"function","title":"ringbuffer.write/2","doc":"Add an entry to the named ringbuffer. Never fails, if the ringbuffer is full then older entries are overwritten.","ref":"ringbuffer.html#write/2"},{"type":"type","title":"ringbuffer.ringbuffer/0","doc":null,"ref":"ringbuffer.html#t:ringbuffer/0"},{"type":"module","title":"ringbuffer_app","doc":"RingBuffer application","ref":"ringbuffer_app.html"},{"type":"function","title":"ringbuffer_app.start/2","doc":"Application callback, start the ringbuffer supervisor.","ref":"ringbuffer_app.html#start/2"},{"type":"function","title":"ringbuffer_app.stop/1","doc":"Application callback, called when stopping the application.","ref":"ringbuffer_app.html#stop/1"},{"type":"module","title":"ringbuffer_process","doc":"Process to own the created ets table for the ring buffer.","ref":"ringbuffer_process.html"},{"type":"function","title":"ringbuffer_process.code_change/3","doc":null,"ref":"ringbuffer_process.html#code_change/3"},{"type":"function","title":"ringbuffer_process.handle_call/3","doc":null,"ref":"ringbuffer_process.html#handle_call/3"},{"type":"function","title":"ringbuffer_process.handle_cast/2","doc":null,"ref":"ringbuffer_process.html#handle_cast/2"},{"type":"function","title":"ringbuffer_process.handle_info/2","doc":null,"ref":"ringbuffer_process.html#handle_info/2"},{"type":"function","title":"ringbuffer_process.init/1","doc":null,"ref":"ringbuffer_process.html#init/1"},{"type":"function","title":"ringbuffer_process.process_pid/1","doc":"Find the process pid for the process owning the ets table. If the buffer does not exist then an error is returned.","ref":"ringbuffer_process.html#process_pid/1"},{"type":"function","title":"ringbuffer_process.read/1","doc":"Read a payload from the buffer. Skip entries that are deleted by the writers. There are a coupe of race conditions we need to take care of: 1. Writer incremented -&gt; Reader tries entry --&gt; Writer writes entry In this case the w-value read by the reader is Size smaller than that of the writer. In this case we wait till the writer finishes writing. 2. Two or more readers arrive at the same time, incrementing the reader value. One of the readers will have the correct value and can fetch the next entry. In this case the reader can move past the writer if there are not enough entries in the buffer for all readers. For the case where multiple readers are racing past the writer can not be solved without synchronization, we let the ringbuffer process handle the reader increment.","ref":"ringbuffer_process.html#read/1"},{"type":"function","title":"ringbuffer_process.start_link/2","doc":"Create a new process managing a ringbuffer.","ref":"ringbuffer_process.html#start_link/2"},{"type":"function","title":"ringbuffer_process.terminate/2","doc":null,"ref":"ringbuffer_process.html#terminate/2"},{"type":"function","title":"ringbuffer_process.write/2","doc":"Write a payload the buffer. If the readers can't keep up then older entries are deleted.","ref":"ringbuffer_process.html#write/2"},{"type":"module","title":"ringbuffer_sup","doc":"Supervisor for the ring buffers processes.","ref":"ringbuffer_sup.html"},{"type":"function","title":"ringbuffer_sup.find_child/1","doc":"Find the Pid of the ringbuffer with a certain name.","ref":"ringbuffer_sup.html#find_child/1"},{"type":"function","title":"ringbuffer_sup.init/1","doc":"Supervisor callback, initialize the children.","ref":"ringbuffer_sup.html#init/1"},{"type":"function","title":"ringbuffer_sup.start_child/2","doc":"Start a ringbuffer.","ref":"ringbuffer_sup.html#start_child/2"},{"type":"function","title":"ringbuffer_sup.start_link/0","doc":"Start the simple_one_for_one supervisor for the ring buffer processes.","ref":"ringbuffer_sup.html#start_link/0"},{"type":"function","title":"ringbuffer_sup.stop_child/1","doc":"Stop a ringbuffer. The managing process is removed from the supervisor and the ets table is released.","ref":"ringbuffer_sup.html#stop_child/1"},{"type":"extras","title":"Overview","doc":"[![Test](https://github.com/zotonic/ringbuffer/workflows/Test/badge.svg)](https://github.com/zotonic/ringbuffer/actions?query=workflow%3ATest)\n[![Hex version](https://img.shields.io/hexpm/v/ringbuffer.svg \"Hex version\")](https://hex.pm/packages/ringbuffer)\n\nRingbuffer\n==========\n\nA ring buffer implementation using Erlang and ets tables.\n\nMain feature is lock free writing without message passing, making\nthis implementation ideal for log systems with many fast writers or\nbig bursts.\n\nRingbuffer implements a length limited queue. In systems this is\noften implemented as a ring, or cylic, buffer. Where the writer can\npush the reader ahead if the buffer is full.\n\nThis kind of buffers is useful in situations where you can have\nsurges of writers, with a limited amount of readers. And where it\nis allowed to drop entries from the queue if the readers can't keep\nup with the writers.\n\nAn example is a logging system for a http server, which can handle large\nbursts of requests. The logger is often limited in its throughput, and it\nis perfectly ok to drop log entries if that means that the server can\nhandle the peak load.\n\nThis ring buffer is technically not a ring. It is a size limited buffer,\nimplemented in ets. Its main characteristics are:\n\n * Optimized for writes: non locking and non blocking queue writes;\n * Size limited, define the maximum number of entries upon queue creation;\n * Readers are synchronized to prevent race conditions;\n * Readers return the number of entries that were lost due to too fast writers;\n * As many queues as needed.\n\nThe size of the ring is set upon creation. If the ring is full\nthen older entries are overwritten. Overwritten entries are skipped\nwhen reading the next entry. The number of skipped entries is\nreturned.\n\nThe ring's ets table is owned by a process managed by the ringbuffer_sup.","ref":"readme.html"},{"type":"extras","title":"Installation - Overview","doc":"RingBuffer is at Hex, in your `rebar.config` file use:\n\n```erlang\n{deps, [\n    ringbuffer\n]}.\n```\n\nYou can also use the direct Git url and use the development version:\n\n```erlang\n{deps, [\n    {ringbuffer, {git, \"https://github.com/zotonic/ringbuffer.git\", {branch, \"main\"}}}\n]}.\n```","ref":"readme.html#installation"},{"type":"extras","title":"Usage - Overview","doc":"First create a ringbuffer. The buffer is named with an atom\nand needs a size of the maximum amount of items to buffer.\n\n```erlang\n    {ok, Pid} = ringbuffer:new(name, 1000)\n```\n\nThen an entry can be written:\n\n```erlang\n    ok = ringbuffer:write(name, Payload).\n```\n\nThe `Payload` can be any Erlang term.\n\n\nIt can be read afterwards:\n\n```erlang\n    {ok, {NSkipped, Payload}} = ringbuffer:read(name).\n```\n\nThe `NSkipped` is the number of entries skipped during reads. If the consumer\ncan keep up with the producers then it will be `0`. If entries are overwritten\nthen it will return the number of overwritten entries.\n\nIf the buffer is empty then an error is returned:\n\n```erlang\n    {error, empty} = ringbuffer:read(name).\n```","ref":"readme.html#usage"},{"type":"extras","title":"Use in your own supervisor - Overview","doc":"You can use ringbuffer in your own supervisor with the following child spec:\n\n```erlang\n    % Size and name of the ringbuffer\n    BufferSize = 1000,\n    NameOfMyBuffer = foobar,\n    % The child spec for your supervisor\n    #{\n        start => {ringbuffer_process, start_link, [NameOfMyBuffer, BufferSize]},\n        restart => permanent,\n        type => worker\n    }\n```","ref":"readme.html#use-in-your-own-supervisor"},{"type":"extras","title":"Test - Overview","doc":"Run the tests:\n\n```\nmake test\n```\n\nAll tests should pass.\n\nFor additional checks, also run:\n\n```\nmake xref\nmake dialyzer\n```","ref":"readme.html#test"},{"type":"extras","title":"License - Overview","doc":"Ringbuffer is licensed under the Apache 2.0 license.","ref":"readme.html#license"},{"type":"extras","title":"License","doc":"Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","ref":"license.html"}],"proglang":"erlang","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.35.1"}}